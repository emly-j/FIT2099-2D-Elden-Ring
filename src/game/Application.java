package game;

import game.environments.spawning.Dragonbarrow;
import game.environments.spawning.Graveyard;
import game.environments.spawning.GustOfWind;
import game.environments.spawning.PuddleOfWater;
import java.util.Arrays;
import java.util.List;

import edu.monash.fit2099.engine.displays.Display;
import edu.monash.fit2099.engine.positions.*;
import game.actors.MerchantK;
import game.actors.Player;
import game.controllers.RestLocationManager;
import game.environments.*;
import game.environments.sitesoflostgrace.TableOfLostGrace;
import game.environments.sitesoflostgrace.TheFirstStep;
import game.utils.FancyMessage;

/**
 * The main class to start the game.
 * Created by:
 * @author Adrian Kristanto
 * Modified by: Emily Jap
 *
 */
public class Application {

	public static void main(String[] args) {

		World world = new World(new Display());

		FancyGroundFactory groundFactory = new FancyGroundFactory(new Dirt(), new Wall(), new Floor(), new Graveyard(), new GustOfWind(), new PuddleOfWater(), new Cliff());

		List<String> map1 = Arrays.asList(
				"......................#.............#..........................+++.........", // x = 30, y = 0
				"......................#.............#.......................+++++..........",
				"......................#..___....____#.........................+++++........",
				"......................#...........__#............................++........",
				"......................#_____........#.............................+++......",
				"......................#............_#..............................+++.....",
				"......................######...######......................................",
				"...........................................................................",
				"..........................._...............................................",
				"........++++......................###___###................................",
				"........+++++++...................________#................................",
				"..........+++.....................#________................................",
				"............+++...................#_______#................................",
				".............+....................###___###................................",
				"............++......................#___#..................................",
				"..............+..................._........................................",
				"..............++................................................._.........",
				"..............................................++...........................",
				"..................++++......................+++...............######..##...",
				"#####___######....++...........................+++............#....____....",
				"_____________#.....++++..........................+..............__.....#...",
				"_____________#.....+....++........................++.........._.....__.#...",
				"_____________#.........+..+.....................+++...........###..__###...",
				"_____________#.............++.............................................."); /// x = 6 y = 24

//				"..nnnn................................................~~~~~~~~~~~~~~~~~~~~~",
//				"......................#####....######..................~~~~~~~~~~~~~~~~~~~~",
//				"..nnnn................#..___....____#...................~~~~~~~~~~~~~~~~~~~",
//				"..................................__#....................~~~~~~~~~~~~~~~~~~",
//				"......................._____........#.....................~~~~~~~~~~~~~~~~~",
//				"......................#............_#......................~~~~~~~~~~~~~~~~",
//				"......................#...........###......................................",
//				"...........................................................................",
//				"...........................................................................",
//				"~~~~~~~~~~~.......................###___###................................",
//				"~~~~~~~~~~~~......................________#....nnnn........................",
//				"~~~~~~~~~~~~~.....................#________................................",
//				"~~~~~~~~~~~~......................#_______#....nnnn........................",
//				"~~~~~~~~~~~.......................###___###................................",
//				"~~~~~~~~~~..........................#___#..................................",
//				"...........................................................................",
//				"...........................................................................",
//				"...........................................................................",
//				"..####__##...........................................&&&......######..##...",
//				"..#.....__...........................................&&&......#....____....",
//				"..#___..............&&&..............................&&&........__.....#...",
//				"..####__###.........&&&......................................._.....__.#...",
//				"....................&&&.......................................###..__###...",
//				"...........................................................................");
		GameMap initialMap = new GameMap(groundFactory, map1);
		world.addGameMap(initialMap);

		// BEHOLD, ELDEN RING
		for (String line : FancyMessage.ELDEN_RING.split("\n")) {
			new Display().println(line);
			try {
				Thread.sleep(200);
			} catch (Exception exception) {
				exception.printStackTrace();
			}
		}
//		initialMap.at(38,11).setGround(new TheFirstStep());
//		RestLocationManager.storeLastLocation(initialMap.at(38,11));
//		initialMap.at(40,12).addActor(new MerchantK());
//		initialMap.at(30, 11).setGround(new Cliff());
//		initialMap.at(35,10).setGround(new GoldenFogDoor(stormVeilCastle));
//
//
//		// HINT: what does it mean to prefer composition to inheritance?
//		Player player = new Player("Tarnished", '@', 300);
//		world.addPlayer(player, initialMap.at(36, 10));
//		world.run();
//		/**
//		 * LIMGRAVE
//		 */
//
//		FancyGroundFactory groundFactory2 = new FancyGroundFactory(new Dirt(), new Wall(), new Floor(), new Graveyard(), new GustOfWind(), new PuddleOfWater(), new Cliff());
//
//		List<String> map2 = Arrays.asList(
//				"......................#.............#..........................+++.........",
//				"......................#.............#.......................+++++..........",
//				"......................#..___....____#.........................+++++........",
//				"......................#...........__#............................++........",
//				"......................#_____........#.............................+++......",
//				"......................#............_#..............................+++.....",
//				"......................######...######......................................",
//				"...........................................................................",
//				"...........................=...............................................",
//				"........++++......................###___###................................",
//				"........+++++++...................________#................................",
//				"..........+++.....................#________................................",
//				"............+++...................#_______#................................",
//				".............+....................###___###................................",
//				"............++......................#___#..................................",
//				"..............+...................=........................................",
//				"..............++.................................................=.........",
//				"..............................................++...........................",
//				"..................++++......................+++...............######..##...",
//				"#####___######....++...........................+++............#....____....",
//				"_____________#.....++++..........................+..............__.....#...",
//				"_____________#.....+....++........................++.........._.....__.#...",
//				"_____________#.........+..+.....................+++...........###..__###...",
//				"_____________#.............++..............................................");
//		GameMap limgrave = new GameMap(groundFactory2, map2);
//		world.addGameMap(limgrave);
//		world.run();
//
//

//		/**
//		 * STROMVEILCASTLE
//		 */
//		FancyGroundFactory stormGroundFactory = new FancyGroundFactory(new Dirt(), new Wall(), new Floor(), new Graveyard(), new GustOfWind(), new PuddleOfWater(), new Cliff());
//
//		List<String> stormVeilMap = Arrays.asList(
//				"...........................................................................",
//				"..................<...............<........................................",
//				"...........................................................................",
//				"##############################################...##########################",
//				"............................#................#.......B..............B......",
//				".....B...............B......#................#.............................",
//				"...............................<.........<.................................",
//				".....B...............B......#................#.......B..............B......",
//				"............................#................#.............................",
//				"#####################..#############...############.####..#########...#####",
//				"...............#++++++++++++#................#++++++++++++#................",
//				"...............#++++++++++++...<.........<...#++++++++++++#................",
//				"...............#++++++++++++..................++++++++++++#................",
//				"...............#++++++++++++#................#++++++++++++#................",
//				"#####...##########.....#############...#############..#############...#####",
//				".._______........................B......B........................B.....B...",
//				"_____..._..____....&&........<..............<..............................",
//				".........____......&&......................................................",
//				"...._______..................<..............<....................<.....<...",
//				"#####....##...###..#####...##########___###############......##.....####...",
//				"+++++++++++++++++++++++++++#...................#+++++++++++++++++++++++++++",
//				"+++++++++++++++++++++++++++....................#+++++++++++++++++++++++++++",
//				"+++++++++++++++++++++++++++#....................+++++++++++++++++++++++++++",
//				"+++++++++++++++++++++++++++#...................#+++++++++++++++++++++++++++");
//		GameMap stormVeilCastle = new GameMap(stormGroundFactory, stormVeilMap);
//		world.addGameMap(stormVeilCastle);

			/**
			 * ROUNDTABLE HOLD
			 */

		FancyGroundFactory roundGroundFactory = new FancyGroundFactory(new Dirt(), new Wall(), new Floor(), new Graveyard(), new GustOfWind(), new PuddleOfWater(), new Cliff());

		List<String> roundTableMap = Arrays.asList(
				"##################",
				"#________________#",
				"#________________#",
				"#________________#",
				"#________________#",
				"#________________#",
				"#________________#",
				"#________________#",
				"#________________#",
				"#________________#",
				"########___#######"); //11 down,  10 accross
		GameMap roundTableHold = new GameMap(roundGroundFactory, roundTableMap);
		world.addGameMap(roundTableHold);
		roundTableHold.at(9,10).setGround(new GoldenFogDoor(initialMap.at(6,23), initialMap, "Limgrave"));


		/**
		 * BOOS ROOM
		 */

		FancyGroundFactory bossGroundFactory = new FancyGroundFactory(new Dirt(), new Wall(), new Floor(), new Graveyard(), new GustOfWind(), new PuddleOfWater(), new Cliff());

		List<String> bossMap = Arrays.asList(
				"+++++++++++++++++++++++++",
				".........................",
				".._......................",
				".........................",
				".........................",
				".........................",
				".........................",
				".........................",
				"+++++++++++++++++++++++++");
		GameMap bossRoom = new GameMap(bossGroundFactory, bossMap);
		world.addGameMap(bossRoom);

		initialMap.at(38,11).setGround(new TheFirstStep());
		RestLocationManager.storeLastLocation(initialMap.at(38,11));
		initialMap.at(40,12).addActor(new MerchantK());
		initialMap.at(30, 11).setGround(new Cliff());
		initialMap.at(30,0).setGround(new GoldenFogDoor(roundTableHold.at(9,10), roundTableHold, "Storm Veil Castle"));
		initialMap.at(6,23).setGround(new GoldenFogDoor(roundTableHold.at(9,10), roundTableHold, "Roundtable Hold"));


		// HINT: what does it mean to prefer composition to inheritance?
		Player player = new Player("Tarnished", '@', 300);
		world.addPlayer(player, initialMap.at(36, 10));
		world.run();

	}
}
